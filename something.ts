import { TypedBody, TypedParam, TypedRoute } from "@nestia/core";
import { Controller } from "@nestjs/common";
import typia, { tags } from "typia";

import { IPageIShoppingSale } from "../../../api/structures/IPageIShoppingSale";
import { IShoppingSale } from "../../../api/structures/IShoppingSale";

@Controller("/shoppings/sales")
export class ShoppingsSalesController {
  /**
   * Register a new sale (listing) as a seller. Request contains full initial
   * config: section, unit list, option groups, possible stock configuration,
   * categories, primary tags, base description/content including attachments
   * and images. Creates the sale and first history snapshot in one transaction.
   * Only for authenticated sellers.
   *
   * @param body Register a new sale (listing) as a seller. Request contains
   *   full initial config: section, unit list, option groups, possible stock
   *   configuration, categories, primary tags, base description/content
   *   including attachments and images. Creates the sale and first history
   *   snapshot in one transaction. Only for authenticated sellers.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async post(
    @TypedBody()
    body: IShoppingSale.ICreate,
  ): Promise<IShoppingSale> {
    body;
    return typia.random<IShoppingSale>();
  }
  /**
   * Get a paginated, searchable list of product sales. Can filter by section
   * (shopping_section_id), seller (shopping_seller_customer_id), categories
   * (shopping_channel_category_ids), price range, state
   * (open/paused/suspended/closed), and search by keyword (title/body/tags).
   * Result returns summary views for high performance on list pages. Use this
   * to render shop/catalog UIs.
   *
   * @param body Get a paginated, searchable list of product sales. Can filter
   *   by section (shopping_section_id), seller (shopping_seller_customer_id),
   *   categories (shopping_channel_category_ids), price range, state
   *   (open/paused/suspended/closed), and search by keyword (title/body/tags).
   *   Result returns summary views for high performance on list pages. Use this
   *   to render shop/catalog UIs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async patch(
    @TypedBody()
    body: IShoppingSale.IRequest,
  ): Promise<IPageIShoppingSale.ISummary> {
    body;
    return typia.random<IPageIShoppingSale.ISummary>();
  }
  /**
   * Get all detailed information about a sale. Shows section, seller, all units
   * (bundled/composed products), options, inventory, pricing (nominal/real),
   * categories, tags, content, attached media, current/previous snapshots, and
   * any additional status info. Use for item detail and checkout screens.
   *
   * @param saleId UUID of target product sale to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleId")
  public async getBySaleid(
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingSale> {
    saleId;
    return typia.random<IShoppingSale>();
  }
  /**
   * Change existing sale's data: content, settings, price, inventory, category,
   * tags, etc. Only specified fields changed. System generates new snapshot to
   * keep history/audit. Owner or admin rights only. Responds with new state
   * including evidence structure.
   *
   * @param saleId UUID of product sale to update.
   * @param body Change existing sale's data: content, settings, price,
   *   inventory, category, tags, etc. Only specified fields changed. System
   *   generates new snapshot to keep history/audit. Owner or admin rights only.
   *   Responds with new state including evidence structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleId")
  public async putBySaleid(
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingSale.IUpdate,
  ): Promise<IShoppingSale> {
    saleId;
    body;
    return typia.random<IShoppingSale>();
  }
  /**
   * Set a sale to suspended or closed. Only possible if allowed (no active paid
   * orders etc). Sets suspension/closure timestamp, changes visibility/state.
   * Does not erase data. Only owner or admin may call this. Returns updated
   * sale with new state including audit/evidence timestamps.
   *
   * @param saleId UUID of product sale to discontinue/suspend.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleId")
  public async eraseBySaleid(
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingSale> {
    saleId;
    return typia.random<IShoppingSale>();
  }
}
